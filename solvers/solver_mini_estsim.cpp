#include <Eigen/Dense>
#include "mex.h"




using namespace Eigen;




MatrixXcd solver_mini_estsim(const VectorXd& data)
{
	// Compute coefficients
    const double* d = data.data();
    VectorXd coeffs(37);
    coeffs[0] = std::pow(d[0],2) + std::pow(d[1],2);
    coeffs[1] = 2*d[0];
    coeffs[2] = -2*d[1];
    coeffs[3] = 1;
    coeffs[4] = 2*d[1];
    coeffs[5] = -2*d[0]*d[2] - 2*d[1]*d[3];
    coeffs[6] = 2*d[1]*d[2] - 2*d[0]*d[3];
    coeffs[7] = -2*d[2];
    coeffs[8] = -2*d[3];
    coeffs[9] = std::pow(d[2],2) + std::pow(d[3],2) - d[4];
    coeffs[10] = std::pow(d[5],2) + std::pow(d[6],2);
    coeffs[11] = 2*d[5];
    coeffs[12] = -2*d[6];
    coeffs[13] = 2*d[6];
    coeffs[14] = -2*d[5]*d[7] - 2*d[6]*d[8];
    coeffs[15] = 2*d[6]*d[7] - 2*d[5]*d[8];
    coeffs[16] = -2*d[7];
    coeffs[17] = -2*d[8];
    coeffs[18] = std::pow(d[7],2) + std::pow(d[8],2) - d[9];
    coeffs[19] = std::pow(d[10],2) + std::pow(d[11],2);
    coeffs[20] = 2*d[10];
    coeffs[21] = -2*d[11];
    coeffs[22] = 2*d[11];
    coeffs[23] = -2*d[10]*d[12] - 2*d[11]*d[13];
    coeffs[24] = 2*d[11]*d[12] - 2*d[10]*d[13];
    coeffs[25] = -2*d[12];
    coeffs[26] = -2*d[13];
    coeffs[27] = std::pow(d[12],2) + std::pow(d[13],2) - d[14];
    coeffs[28] = std::pow(d[15],2) + std::pow(d[16],2);
    coeffs[29] = 2*d[15];
    coeffs[30] = -2*d[16];
    coeffs[31] = 2*d[16];
    coeffs[32] = -2*d[15]*d[17] - 2*d[16]*d[18];
    coeffs[33] = 2*d[16]*d[17] - 2*d[15]*d[18];
    coeffs[34] = -2*d[17];
    coeffs[35] = -2*d[18];
    coeffs[36] = std::pow(d[17],2) + std::pow(d[18],2) - d[19];



	// Setup elimination template
	static const int coeffs0_ind[] = { 0,10,19,28,0,10,19,28,0,10,1,0,11,10,19,20,29,2,1,0,11,12,10,20,21,29,30,2,0,12,10,19,21,30,1,10,11,0,19,28,3,2,1,3,11,12,20,3,3,3,2,3,10,12,0,19,21,3,3,28,3,11,3,1,20,29,3,12,3,2,21,3,30,3,3,3,3,10,0,19,28,4,13,10,0,19,22,28,31,4,13,11,10,0,19,1,20,28,29,1,4,13,11,22,12,11,1,20,2,21,29,30,1,11,20,12,10,2,21,0,19,28,30,13,4,22,3,11,1,20,3,3,29,3,31,11,1,20,3,12,3,3,2,21,30,3,29,3,3,3,3,13,4,0,19,10,22,28,31,3,3,13,4,22,1,20,11,29,31,3,3,3,11,1,20,2,21,12,30,29,3,3,3,3,3,3,3,3,10,0,19,28,5,14,10,23,19,0,28,32,6,5,14,15,10,23,24,0,19,32,28,33,6,15,10,24,19,0,33,28,5,14,11,19,1,0,20,10,28,29,7,6,5,16,14,15,23,12,11,25,2,20,1,21,29,30,34,7,6,16,15,24,12,25,19,21,2,0,10,34,28,30,7,14,16,5,23,3,20,3,1,3,11,29,32,3,7,15,16,6,24,25,3,21,3,3,2,12,30,33,3,16,7,25,3,3,3,3,34,14,5,23,13,4,22,10,19,0,32,31,28,8,17,15,14,5,23,6,24,11,13,26,1,22,4,20,32,33,31,29,35,8,17,15,6,24,11,26,20,1,10,19,0,33,35,29,28,8,17,16,14,5,23,7,25,22,4,11,32,20,13,1,34,31,29,8,17,26,16,15,7,25,6,24,20,1,12,33,21,11,2,34,29,30,17,8,26,16,7,25,3,34,3,3,35,3,17,8,5,23,14,26,3,3,3,13,32,22,4,35,3,31,17,8,26,6,24,15,3,3,3,11,33,20,1,35,3,29,17,8,26,7,25,16,3,3,34,35,3,3,14,5,23,0,19,10,28,32,9,18,15,14,27,6,23,5,24,32,33,36,9,18,15,27,24,6,36,0,19,33,10,28,9,18,16,23,7,5,25,14,1,32,20,11,29,34,9,18,27,16,24,25,7,6,15,2,33,21,34,12,30,18,9,27,25,7,16,3,34,36,3,3,3,18,9,27,17,8,26,14,23,5,36,4,22,13,31,35,32,18,9,27,17,26,8,15,24,6,36,1,20,35,11,29,33,18,9,27,26,8,16,36,25,17,7,35,34,8,26,17,3,35,3,3,3 };
	static const int coeffs1_ind[] = { 9,27,18,36,18,9,27,5,23,14,32,36,18,27,9,6,24,36,15,33,27,9,18,7,36,25,16,34,18,27,9,8,26,17,35,36,9,27,18,17,36,26,8,3,3,3,3,35 };
	static const int C0_ind[] = { 0,5,27,52,54,57,79,94,108,114,159,162,164,166,170,186,211,212,213,214,216,217,220,238,239,253,264,266,268,269,272,276,291,306,320,324,326,327,328,363,371,373,374,376,378,379,382,398,423,425,427,428,430,431,433,434,435,450,465,469,479,483,485,486,487,522,533,536,537,539,540,541,575,589,592,593,628,648,655,659,678,689,694,702,704,705,716,729,741,744,750,754,756,759,760,761,765,778,784,797,798,802,803,806,807,808,810,811,814,818,835,837,851,855,859,861,862,863,864,865,866,884,888,907,910,911,913,915,918,919,920,924,937,943,946,960,963,964,967,968,969,970,971,972,990,994,999,1021,1024,1025,1043,1072,1079,1080,1081,1082,1083,1095,1102,1115,1121,1127,1130,1131,1133,1134,1135,1148,1149,1169,1173,1177,1180,1183,1184,1186,1187,1188,1201,1202,1225,1228,1229,1239,1240,1241,1254,1264,1296,1301,1305,1322,1325,1330,1350,1352,1355,1356,1372,1377,1378,1379,1382,1383,1402,1404,1405,1407,1411,1419,1428,1430,1432,1435,1456,1457,1461,1462,1472,1478,1486,1492,1508,1512,1513,1516,1517,1522,1528,1534,1537,1539,1540,1542,1544,1545,1548,1561,1562,1564,1566,1567,1568,1570,1584,1587,1589,1591,1593,1594,1597,1601,1615,1616,1618,1620,1621,1622,1628,1631,1634,1637,1645,1649,1651,1652,1653,1667,1671,1672,1675,1676,1681,1687,1688,1693,1699,1702,1703,1705,1706,1707,1721,1724,1726,1727,1728,1734,1740,1741,1743,1755,1758,1759,1777,1781,1787,1793,1794,1814,1821,1825,1826,1831,1835,1836,1839,1841,1844,1852,1853,1855,1860,1867,1868,1870,1871,1874,1878,1879,1880,1882,1884,1885,1886,1888,1895,1897,1902,1905,1907,1909,1912,1921,1923,1924,1933,1934,1938,1939,1942,1945,1947,1948,1949,1955,1959,1963,1969,1973,1975,1978,1979,1980,1984,1989,1993,1995,1997,1998,1999,2000,2003,2005,2012,2017,2021,2025,2027,2028,2029,2030,2031,2032,2042,2046,2048,2050,2051,2052,2053,2054,2058,2065,2073,2076,2077,2081,2084,2085,2101,2103,2104,2106,2112,2118,2132,2139,2140,2141,2142,2143,2144,2149,2153,2154,2155,2157,2159,2162,2170,2171,2186,2188,2189,2193,2194,2195,2198,2203,2204,2207,2208,2210,2212,2213,2220,2224,2240,2243,2244,2246,2247,2248,2254,2258,2261,2262,2264,2270,2303,2308,2312,2322,2325,2327,2328,2329,2332,2337,2356,2357,2359,2361,2362,2363,2365,2379,2382,2384,2386,2389,2410,2411,2415,2416,2426,2428,2431,2432,2433,2434,2440,2446,2462,2466,2467,2470,2471,2476,2481,2482,2484,2486,2487,2488,2494,2498,2502,2516,2519,2521,2522,2523,2529,2534,2535,2537,2538,2539,2540,2550,2553,2554,2572,2576,2582,2587,2588,2589,2590,2592,2593,2609,2616,2620,2621,2626,2630,2631,2634,2636,2639,2640,2643,2645,2646,2647,2648,2663,2665,2666,2675,2680,2681,2684,2687,2689,2690,2693,2696,2697,2698,2699,2701,2717,2720,2721,2731,2735,2737,2739,2740,2741,2742,2747,2754,2776,2777,2778,2790,2791,2793,2795,2807 } ;
	static const int C1_ind[] = { 43,46,48,49,77,82,86,96,99,101,102,103,131,136,137,149,152,153,154,155,187,191,197,202,203,205,207,208,246,249,251,255,258,260,261,263,285,286,287,299,300,302,304,308,311,313,314,316 };

	Matrix<double,53,53> C0; C0.setZero();
	Matrix<double,53,6> C1; C1.setZero();
	for (int i = 0; i < 565; i++) { C0(C0_ind[i]) = coeffs(coeffs0_ind[i]); }
	for (int i = 0; i < 48; i++) { C1(C1_ind[i]) = coeffs(coeffs1_ind[i]); } 

	Matrix<double,53,6> C12 = C0.partialPivLu().solve(C1);



	// Setup action matrix
	// Matrix<double,10, 6> RR;
    MatrixXd RR(10, 6);	
	RR << -C12.bottomRows(4), Matrix<double,6,6>::Identity(6, 6);

	static const int AM_ind[] = { 8,0,1,2,9,3 };
	// Matrix<double, 6, 6> AM;
    MatrixXd AM(6, 6);
	for (int i = 0; i < 6; i++) {
		AM.row(i) = RR.row(AM_ind[i]);
	}

	Matrix<std::complex<double>, 4, 6> sols;
	sols.setZero();

	// Solve eigenvalue problem
	EigenSolver<Matrix<double, 6, 6> > es(AM);
	ArrayXcd D = es.eigenvalues();	
	ArrayXXcd V = es.eigenvectors();

V = (V / V.row(0).array().replicate(6, 1)).eval();


    sols.row(0) = V.row(1).array();
    sols.row(1) = V.row(2).array();
    sols.row(2) = V.row(3).array();
    sols.row(3) = D.transpose().array();









	return sols;
}
// Action =  w
// Quotient ring basis (V) = 1,x,y,z,w,w^2,
// Available monomials (RR*V) = x*w,y*w,z*w,w^3,1,x,y,z,w,w^2,





void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
	if (nrhs != 1) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:mini_estsim:nrhs", "One input required.");
	}
	if (nlhs != 1) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:mini_estsim:nlhs", "One output required.");
	}    
	if (!mxIsDouble(prhs[0]) || mxIsComplex(prhs[0])) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:mini_estsim:notDouble", "Input data must be type double.");
	}
	if(mxGetNumberOfElements(prhs[0]) % 20 != 0) {
		mexErrMsgIdAndTxt("automatic_generator_cvpr:mini_estsim:incorrectSize", "Input size must be multiple of 20.");
	}
	int n_instances = mxGetNumberOfElements(prhs[0]) / 20;
	double *input = mxGetPr(prhs[0]);
	plhs[0] = mxCreateDoubleMatrix(4,6*n_instances,mxCOMPLEX);
	double* zr = mxGetPr(plhs[0]);
	double* zi = mxGetPi(plhs[0]);
	for(int k = 0; k < n_instances; k++) {
		const VectorXd data = Map<const VectorXd>(input + k*20, 20);
		MatrixXcd sols = solver_mini_estsim(data);
		Index offset = k*sols.size();
		for (Index i = 0; i < sols.size(); i++) {
			zr[i+offset] = sols(i).real();
			zi[i+offset] = sols(i).imag();
		}
	}
}


